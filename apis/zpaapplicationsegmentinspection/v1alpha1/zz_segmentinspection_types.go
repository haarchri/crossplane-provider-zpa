/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppsConfigObservation struct {
}

type AppsConfigParameters struct {

	// +kubebuilder:validation:Optional
	AllowOptions *bool `json:"allowOptions,omitempty" tf:"allow_options,omitempty"`

	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	AppTypes []*string `json:"appTypes,omitempty" tf:"app_types,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationPort *string `json:"applicationPort,omitempty" tf:"application_port,omitempty"`

	// +kubebuilder:validation:Optional
	ApplicationProtocol *string `json:"applicationProtocol,omitempty" tf:"application_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// +kubebuilder:validation:Optional
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	LocalDomain *string `json:"localDomain,omitempty" tf:"local_domain,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Portal *bool `json:"portal,omitempty" tf:"portal,omitempty"`

	// +kubebuilder:validation:Optional
	TrustUntrustedCert *bool `json:"trustUntrustedCert,omitempty" tf:"trust_untrusted_cert,omitempty"`
}

type CommonAppsDtoObservation struct {
}

type CommonAppsDtoParameters struct {

	// +kubebuilder:validation:Optional
	AppsConfig []AppsConfigParameters `json:"appsConfig,omitempty" tf:"apps_config,omitempty"`
}

type SegmentInspectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SegmentInspectionParameters struct {

	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET. The value NEVER indicates the use of the client forwarding policy.
	// +kubebuilder:validation:Optional
	BypassType *string `json:"bypassType,omitempty" tf:"bypass_type,omitempty"`

	// +kubebuilder:validation:Optional
	CommonAppsDto []CommonAppsDtoParameters `json:"commonAppsDto,omitempty" tf:"common_apps_dto,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigSpace *string `json:"configSpace,omitempty" tf:"config_space,omitempty"`

	// Description of the application.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of domains and IPs.
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Whether Double Encryption is enabled or disabled for the app.
	// +kubebuilder:validation:Optional
	DoubleEncrypt *bool `json:"doubleEncrypt,omitempty" tf:"double_encrypt,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	// +kubebuilder:validation:Optional
	HealthReporting *string `json:"healthReporting,omitempty" tf:"health_reporting,omitempty"`

	// +kubebuilder:validation:Optional
	IPAnchored *bool `json:"ipAnchored,omitempty" tf:"ip_anchored,omitempty"`

	// +kubebuilder:validation:Optional
	IcmpAccessType *string `json:"icmpAccessType,omitempty" tf:"icmp_access_type,omitempty"`

	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.
	// +kubebuilder:validation:Optional
	IsCnameEnabled *bool `json:"isCnameEnabled,omitempty" tf:"is_cname_enabled,omitempty"`

	// Name of the application.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PassiveHealthEnabled *bool `json:"passiveHealthEnabled,omitempty" tf:"passive_health_enabled,omitempty"`

	// +kubebuilder:validation:Required
	SegmentGroupID *string `json:"segmentGroupId" tf:"segment_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentGroupName *string `json:"segmentGroupName,omitempty" tf:"segment_group_name,omitempty"`

	// List of the server group IDs.
	// +kubebuilder:validation:Required
	ServerGroups []ServerGroupsParameters `json:"serverGroups" tf:"server_groups,omitempty"`

	// tcp port range
	// +kubebuilder:validation:Optional
	TCPPortRange []TCPPortRangeParameters `json:"tcpPortRange,omitempty" tf:"tcp_port_range,omitempty"`

	// TCP port ranges used to access the app.
	// +kubebuilder:validation:Optional
	TCPPortRanges []*string `json:"tcpPortRanges,omitempty" tf:"tcp_port_ranges,omitempty"`

	// udp port range
	// +kubebuilder:validation:Optional
	UDPPortRange []UDPPortRangeParameters `json:"udpPortRange,omitempty" tf:"udp_port_range,omitempty"`

	// UDP port ranges used to access the app.
	// +kubebuilder:validation:Optional
	UDPPortRanges []*string `json:"udpPortRanges,omitempty" tf:"udp_port_ranges,omitempty"`
}

type ServerGroupsObservation struct {
}

type ServerGroupsParameters struct {

	// +kubebuilder:validation:Required
	ID []*string `json:"id" tf:"id,omitempty"`
}

type TCPPortRangeObservation struct {
}

type TCPPortRangeParameters struct {

	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from"`

	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to"`
}

type UDPPortRangeObservation struct {
}

type UDPPortRangeParameters struct {

	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from"`

	// +kubebuilder:validation:Optional
	To *string `json:"to,omitempty" tf:"to"`
}

// SegmentInspectionSpec defines the desired state of SegmentInspection
type SegmentInspectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SegmentInspectionParameters `json:"forProvider"`
}

// SegmentInspectionStatus defines the observed state of SegmentInspection.
type SegmentInspectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SegmentInspectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SegmentInspection is the Schema for the SegmentInspections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type SegmentInspection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SegmentInspectionSpec   `json:"spec"`
	Status            SegmentInspectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SegmentInspectionList contains a list of SegmentInspections
type SegmentInspectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SegmentInspection `json:"items"`
}

// Repository type metadata.
var (
	SegmentInspection_Kind             = "SegmentInspection"
	SegmentInspection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SegmentInspection_Kind}.String()
	SegmentInspection_KindAPIVersion   = SegmentInspection_Kind + "." + CRDGroupVersion.String()
	SegmentInspection_GroupVersionKind = CRDGroupVersion.WithKind(SegmentInspection_Kind)
)

func init() {
	SchemeBuilder.Register(&SegmentInspection{}, &SegmentInspectionList{})
}
