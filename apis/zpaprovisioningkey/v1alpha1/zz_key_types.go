/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyObservation struct {

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	AppConnectorGroupName *string `json:"appConnectorGroupName,omitempty" tf:"app_connector_group_name,omitempty"`

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	EnrollmentCertName *string `json:"enrollmentCertName,omitempty" tf:"enrollment_cert_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type KeyParameters struct {

	// +kubebuilder:validation:Optional
	AppConnectorGroupID *string `json:"appConnectorGroupId,omitempty" tf:"app_connector_group_id,omitempty"`

	// Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are CONNECTOR_GRP and SERVICE_EDGE_GRP.
	// +kubebuilder:validation:Required
	AssociationType *string `json:"associationType" tf:"association_type,omitempty"`

	// Whether the provisioning key is enabled or not. Supported values: true, false
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// ID of the enrollment certificate that can be used for this provisioning key.
	// +kubebuilder:validation:Required
	EnrollmentCertID *string `json:"enrollmentCertId" tf:"enrollment_cert_id,omitempty"`

	// +kubebuilder:validation:Optional
	IPACL []*string `json:"ipAcl,omitempty" tf:"ip_acl,omitempty"`

	// The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.
	// +kubebuilder:validation:Required
	MaxUsage *string `json:"maxUsage" tf:"max_usage,omitempty"`

	// Name of the provisioning key.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	UIConfig *string `json:"uiConfig,omitempty" tf:"ui_config,omitempty"`

	// The provisioning key utilization count.
	// +kubebuilder:validation:Optional
	UsageCount *string `json:"usageCount,omitempty" tf:"usage_count,omitempty"`

	// ID of the existing App Connector or Service Edge Group.
	// +kubebuilder:validation:Required
	ZcomponentID *string `json:"zcomponentId" tf:"zcomponent_id,omitempty"`

	// Read only property. Applicable only for GET calls, ignored in PUT/POST calls.
	// +kubebuilder:validation:Optional
	ZcomponentName *string `json:"zcomponentName,omitempty" tf:"zcomponent_name,omitempty"`
}

// KeySpec defines the desired state of Key
type KeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyParameters `json:"forProvider"`
}

// KeyStatus defines the observed state of Key.
type KeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Key is the Schema for the Keys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type Key struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeySpec   `json:"spec"`
	Status            KeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyList contains a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Key `json:"items"`
}

// Repository type metadata.
var (
	Key_Kind             = "Key"
	Key_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Key_Kind}.String()
	Key_KindAPIVersion   = Key_Kind + "." + CRDGroupVersion.String()
	Key_GroupVersionKind = CRDGroupVersion.WithKind(Key_Kind)
)

func init() {
	SchemeBuilder.Register(&Key{}, &KeyList{})
}
