/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppConnectorGroupsObservation struct {
}

type AppConnectorGroupsParameters struct {

	// The ID of this resource.
	// +crossplane:generate:reference:type=github.com/zscaler/crossplane-provider-zpa/apis/zpaappconnectorgroup/v1alpha1.ConnectorGroup
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`

	// References to ConnectorGroup in zpaappconnectorgroup to populate id.
	// +kubebuilder:validation:Optional
	IDRefs []v1.Reference `json:"idRefs,omitempty" tf:"-"`

	// Selector for a list of ConnectorGroup in zpaappconnectorgroup to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type ApplicationsObservation struct {
}

type ApplicationsParameters struct {

	// The ID of this resource.
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupObservation struct {

	// The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupParameters struct {

	// List of app-connector IDs.
	// +kubebuilder:validation:Optional
	AppConnectorGroups []AppConnectorGroupsParameters `json:"appConnectorGroups,omitempty" tf:"app_connector_groups,omitempty"`

	// This field is a json array of app-connector-id only.
	// +kubebuilder:validation:Optional
	Applications []ApplicationsParameters `json:"applications,omitempty" tf:"applications,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigSpace *string `json:"configSpace,omitempty" tf:"config_space,omitempty"`

	// This field is the description of the server group.
	// This field is the description of the server group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// This field controls dynamic discovery of the servers.
	// This field controls dynamic discovery of the servers.
	// +kubebuilder:validation:Optional
	DynamicDiscovery *bool `json:"dynamicDiscovery,omitempty" tf:"dynamic_discovery,omitempty"`

	// This field defines if the server group is enabled or disabled.
	// This field defines if the server group is enabled or disabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IPAnchored *bool `json:"ipAnchored,omitempty" tf:"ip_anchored,omitempty"`

	// This field defines the name of the server group.
	// This field defines the name of the server group.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
	// This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
	// +kubebuilder:validation:Optional
	Servers []ServersParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ServersObservation struct {
}

type ServersParameters struct {

	// The ID of this resource.
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupParameters `json:"forProvider"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Group is the Schema for the Groups API. Creates and manages ZPA Server Group resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupSpec   `json:"spec"`
	Status            GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
