/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppConnectorGroupsInitParameters struct {
}

type AppConnectorGroupsObservation struct {

	// The ID of this resource.
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppConnectorGroupsParameters struct {

	// The ID of this resource.
	// +crossplane:generate:reference:type=github.com/zscaler/crossplane-provider-zpa/apis/zpaappconnectorgroup/v1alpha1.ConnectorGroup
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`

	// References to ConnectorGroup in zpaappconnectorgroup to populate id.
	// +kubebuilder:validation:Optional
	IDRefs []v1.Reference `json:"idRefs,omitempty" tf:"-"`

	// Selector for a list of ConnectorGroup in zpaappconnectorgroup to populate id.
	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type ApplicationsInitParameters struct {

	// The ID of this resource.
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationsObservation struct {

	// The ID of this resource.
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationsParameters struct {

	// The ID of this resource.
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupInitParameters struct {

	// List of app-connector IDs.
	AppConnectorGroups []AppConnectorGroupsInitParameters `json:"appConnectorGroups,omitempty" tf:"app_connector_groups,omitempty"`

	// This field is a json array of app-connector-id only.
	Applications []ApplicationsInitParameters `json:"applications,omitempty" tf:"applications,omitempty"`

	ConfigSpace *string `json:"configSpace,omitempty" tf:"config_space,omitempty"`

	// This field is the description of the server group.
	// This field is the description of the server group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// This field controls dynamic discovery of the servers.
	// This field controls dynamic discovery of the servers.
	DynamicDiscovery *bool `json:"dynamicDiscovery,omitempty" tf:"dynamic_discovery,omitempty"`

	// This field defines if the server group is enabled or disabled.
	// This field defines if the server group is enabled or disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IPAnchored *bool `json:"ipAnchored,omitempty" tf:"ip_anchored,omitempty"`

	// This field defines the name of the server group.
	// This field defines the name of the server group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
	// This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
	Servers []ServersInitParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type GroupObservation struct {

	// List of app-connector IDs.
	AppConnectorGroups []AppConnectorGroupsObservation `json:"appConnectorGroups,omitempty" tf:"app_connector_groups,omitempty"`

	// This field is a json array of app-connector-id only.
	Applications []ApplicationsObservation `json:"applications,omitempty" tf:"applications,omitempty"`

	ConfigSpace *string `json:"configSpace,omitempty" tf:"config_space,omitempty"`

	// This field is the description of the server group.
	// This field is the description of the server group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// This field controls dynamic discovery of the servers.
	// This field controls dynamic discovery of the servers.
	DynamicDiscovery *bool `json:"dynamicDiscovery,omitempty" tf:"dynamic_discovery,omitempty"`

	// This field defines if the server group is enabled or disabled.
	// This field defines if the server group is enabled or disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAnchored *bool `json:"ipAnchored,omitempty" tf:"ip_anchored,omitempty"`

	// This field defines the name of the server group.
	// This field defines the name of the server group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
	// This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
	Servers []ServersObservation `json:"servers,omitempty" tf:"servers,omitempty"`
}

type GroupParameters struct {

	// List of app-connector IDs.
	// +kubebuilder:validation:Optional
	AppConnectorGroups []AppConnectorGroupsParameters `json:"appConnectorGroups,omitempty" tf:"app_connector_groups,omitempty"`

	// This field is a json array of app-connector-id only.
	// +kubebuilder:validation:Optional
	Applications []ApplicationsParameters `json:"applications,omitempty" tf:"applications,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigSpace *string `json:"configSpace,omitempty" tf:"config_space,omitempty"`

	// This field is the description of the server group.
	// This field is the description of the server group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// This field controls dynamic discovery of the servers.
	// This field controls dynamic discovery of the servers.
	// +kubebuilder:validation:Optional
	DynamicDiscovery *bool `json:"dynamicDiscovery,omitempty" tf:"dynamic_discovery,omitempty"`

	// This field defines if the server group is enabled or disabled.
	// This field defines if the server group is enabled or disabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IPAnchored *bool `json:"ipAnchored,omitempty" tf:"ip_anchored,omitempty"`

	// This field defines the name of the server group.
	// This field defines the name of the server group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.
	// This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
	// +kubebuilder:validation:Optional
	Servers []ServersParameters `json:"servers,omitempty" tf:"servers,omitempty"`
}

type ServersInitParameters struct {

	// The ID of this resource.
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServersObservation struct {

	// The ID of this resource.
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServersParameters struct {

	// The ID of this resource.
	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupInitParameters `json:"initProvider,omitempty"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Group is the Schema for the Groups API. Creates and manages ZPA Server Group resource
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   GroupSpec   `json:"spec"`
	Status GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
