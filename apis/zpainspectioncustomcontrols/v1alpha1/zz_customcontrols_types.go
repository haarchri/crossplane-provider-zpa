/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssociatedInspectionProfileNamesInitParameters struct {
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type AssociatedInspectionProfileNamesObservation struct {
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type AssociatedInspectionProfileNamesParameters struct {

	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConditionsInitParameters struct {

	// Signifies the key for the object type Supported values: SIZE, VALUE
	// Signifies the key for the object type
	Lhs *string `json:"lhs,omitempty" tf:"lhs,omitempty"`

	// If lhs is set to SIZE, then the user may pass one of the following: EQ: Equals, LE: Less than or equal to, GE: Greater than or equal to. If the lhs is set to VALUE, then the user may pass one of the following: CONTAINS, STARTS_WITH, ENDS_WITH, RX.
	// Denotes the operation type.
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: GET,HEAD, POST, OPTIONS, PUT, DELETE, TRACE
	// Denotes the value for the given object type. Its value depends on the key.
	Rhs *string `json:"rhs,omitempty" tf:"rhs,omitempty"`
}

type ConditionsObservation struct {

	// Signifies the key for the object type Supported values: SIZE, VALUE
	// Signifies the key for the object type
	Lhs *string `json:"lhs,omitempty" tf:"lhs,omitempty"`

	// If lhs is set to SIZE, then the user may pass one of the following: EQ: Equals, LE: Less than or equal to, GE: Greater than or equal to. If the lhs is set to VALUE, then the user may pass one of the following: CONTAINS, STARTS_WITH, ENDS_WITH, RX.
	// Denotes the operation type.
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: GET,HEAD, POST, OPTIONS, PUT, DELETE, TRACE
	// Denotes the value for the given object type. Its value depends on the key.
	Rhs *string `json:"rhs,omitempty" tf:"rhs,omitempty"`
}

type ConditionsParameters struct {

	// Signifies the key for the object type Supported values: SIZE, VALUE
	// Signifies the key for the object type
	// +kubebuilder:validation:Optional
	Lhs *string `json:"lhs,omitempty" tf:"lhs,omitempty"`

	// If lhs is set to SIZE, then the user may pass one of the following: EQ: Equals, LE: Less than or equal to, GE: Greater than or equal to. If the lhs is set to VALUE, then the user may pass one of the following: CONTAINS, STARTS_WITH, ENDS_WITH, RX.
	// Denotes the operation type.
	// +kubebuilder:validation:Optional
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: GET,HEAD, POST, OPTIONS, PUT, DELETE, TRACE
	// Denotes the value for the given object type. Its value depends on the key.
	// +kubebuilder:validation:Optional
	Rhs *string `json:"rhs,omitempty" tf:"rhs,omitempty"`
}

type CustomControlsInitParameters struct {

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Denotes the action
	ActionValue *string `json:"actionValue,omitempty" tf:"action_value,omitempty"`

	// Name of the inspection profile
	// Name of the inspection profile
	AssociatedInspectionProfileNames []AssociatedInspectionProfileNamesInitParameters `json:"associatedInspectionProfileNames,omitempty" tf:"associated_inspection_profile_names,omitempty"`

	ControlNumber *string `json:"controlNumber,omitempty" tf:"control_number,omitempty"`

	// The control rule in JSON format that has the conditions and type of control for the inspection control
	// The control rule in JSON format that has the conditions and type of control for the inspection control
	ControlRuleJSON *string `json:"controlRuleJson,omitempty" tf:"control_rule_json,omitempty"`

	// (string) Returned values: WEBSOCKET_PREDEFINED, WEBSOCKET_CUSTOM, ZSCALER, CUSTOM, PREDEFINED
	ControlType *string `json:"controlType,omitempty" tf:"control_type,omitempty"`

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// This is used to provide the redirect URL if the default action is set to REDIRECT
	// This is used to provide the redirect URL if the default action is set to REDIRECT
	DefaultActionValue *string `json:"defaultActionValue,omitempty" tf:"default_action_value,omitempty"`

	// Description of the custom control
	// Description of the custom control
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the predefined control.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// OWASP Predefined Paranoia Level.
	// OWASP Predefined Paranoia Level. Range: [1-4], inclusive
	ParanoiaLevel *string `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// (string) Returned values: HTTP, HTTPS, FTP, RDP, SSH, WEBSOCKET
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// Rules of the custom controls applied as conditions JSON
	// Rules of the custom controls applied as conditions (JSON)
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Severity of the control number. Supported values: CRITICAL, ERROR, WARNING, INFO
	// Severity of the control number
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Rules to be applied to the request or response type
	// Rules to be applied to the request or response type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The version of the predefined control, the default is: OWASP_CRS/3.3.0
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CustomControlsObservation struct {

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Denotes the action
	ActionValue *string `json:"actionValue,omitempty" tf:"action_value,omitempty"`

	// Name of the inspection profile
	// Name of the inspection profile
	AssociatedInspectionProfileNames []AssociatedInspectionProfileNamesObservation `json:"associatedInspectionProfileNames,omitempty" tf:"associated_inspection_profile_names,omitempty"`

	ControlNumber *string `json:"controlNumber,omitempty" tf:"control_number,omitempty"`

	// The control rule in JSON format that has the conditions and type of control for the inspection control
	// The control rule in JSON format that has the conditions and type of control for the inspection control
	ControlRuleJSON *string `json:"controlRuleJson,omitempty" tf:"control_rule_json,omitempty"`

	// (string) Returned values: WEBSOCKET_PREDEFINED, WEBSOCKET_CUSTOM, ZSCALER, CUSTOM, PREDEFINED
	ControlType *string `json:"controlType,omitempty" tf:"control_type,omitempty"`

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// This is used to provide the redirect URL if the default action is set to REDIRECT
	// This is used to provide the redirect URL if the default action is set to REDIRECT
	DefaultActionValue *string `json:"defaultActionValue,omitempty" tf:"default_action_value,omitempty"`

	// Description of the custom control
	// Description of the custom control
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the predefined control.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// OWASP Predefined Paranoia Level.
	// OWASP Predefined Paranoia Level. Range: [1-4], inclusive
	ParanoiaLevel *string `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// (string) Returned values: HTTP, HTTPS, FTP, RDP, SSH, WEBSOCKET
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// Rules of the custom controls applied as conditions JSON
	// Rules of the custom controls applied as conditions (JSON)
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Severity of the control number. Supported values: CRITICAL, ERROR, WARNING, INFO
	// Severity of the control number
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Rules to be applied to the request or response type
	// Rules to be applied to the request or response type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The version of the predefined control, the default is: OWASP_CRS/3.3.0
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CustomControlsParameters struct {

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Denotes the action
	// +kubebuilder:validation:Optional
	ActionValue *string `json:"actionValue,omitempty" tf:"action_value,omitempty"`

	// Name of the inspection profile
	// Name of the inspection profile
	// +kubebuilder:validation:Optional
	AssociatedInspectionProfileNames []AssociatedInspectionProfileNamesParameters `json:"associatedInspectionProfileNames,omitempty" tf:"associated_inspection_profile_names,omitempty"`

	// +kubebuilder:validation:Optional
	ControlNumber *string `json:"controlNumber,omitempty" tf:"control_number,omitempty"`

	// The control rule in JSON format that has the conditions and type of control for the inspection control
	// The control rule in JSON format that has the conditions and type of control for the inspection control
	// +kubebuilder:validation:Optional
	ControlRuleJSON *string `json:"controlRuleJson,omitempty" tf:"control_rule_json,omitempty"`

	// (string) Returned values: WEBSOCKET_PREDEFINED, WEBSOCKET_CUSTOM, ZSCALER, CUSTOM, PREDEFINED
	// +kubebuilder:validation:Optional
	ControlType *string `json:"controlType,omitempty" tf:"control_type,omitempty"`

	// The performed action. Supported values: PASS, BLOCK and REDIRECT
	// The performed action
	// +kubebuilder:validation:Optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// This is used to provide the redirect URL if the default action is set to REDIRECT
	// This is used to provide the redirect URL if the default action is set to REDIRECT
	// +kubebuilder:validation:Optional
	DefaultActionValue *string `json:"defaultActionValue,omitempty" tf:"default_action_value,omitempty"`

	// Description of the custom control
	// Description of the custom control
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the predefined control.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// OWASP Predefined Paranoia Level.
	// OWASP Predefined Paranoia Level. Range: [1-4], inclusive
	// +kubebuilder:validation:Optional
	ParanoiaLevel *string `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// (string) Returned values: HTTP, HTTPS, FTP, RDP, SSH, WEBSOCKET
	// +kubebuilder:validation:Optional
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// Rules of the custom controls applied as conditions JSON
	// Rules of the custom controls applied as conditions (JSON)
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Severity of the control number. Supported values: CRITICAL, ERROR, WARNING, INFO
	// Severity of the control number
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`

	// Rules to be applied to the request or response type
	// Rules to be applied to the request or response type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The version of the predefined control, the default is: OWASP_CRS/3.3.0
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RulesInitParameters struct {
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	Names []*string `json:"names,omitempty" tf:"names,omitempty"`

	// Rules to be applied to the request or response type
	// Type value for the rules.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RulesObservation struct {
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	Names []*string `json:"names,omitempty" tf:"names,omitempty"`

	// Rules to be applied to the request or response type
	// Type value for the rules.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	// +kubebuilder:validation:Optional
	Names []*string `json:"names,omitempty" tf:"names,omitempty"`

	// Rules to be applied to the request or response type
	// Type value for the rules.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CustomControlsSpec defines the desired state of CustomControls
type CustomControlsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomControlsParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomControlsInitParameters `json:"initProvider,omitempty"`
}

// CustomControlsStatus defines the observed state of CustomControls.
type CustomControlsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomControlsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomControls is the Schema for the CustomControlss API. Creates and manages Inspection Custom Control in Zscaler Private Access cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type CustomControls struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultAction) || has(self.initProvider.defaultAction)",message="defaultAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.severity) || has(self.initProvider.severity)",message="severity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   CustomControlsSpec   `json:"spec"`
	Status CustomControlsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomControlsList contains a list of CustomControlss
type CustomControlsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomControls `json:"items"`
}

// Repository type metadata.
var (
	CustomControls_Kind             = "CustomControls"
	CustomControls_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomControls_Kind}.String()
	CustomControls_KindAPIVersion   = CustomControls_Kind + "." + CRDGroupVersion.String()
	CustomControls_GroupVersionKind = CRDGroupVersion.WithKind(CustomControls_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomControls{}, &CustomControlsList{})
}
