/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssociatedInspectionProfileNamesObservation struct {
}

type AssociatedInspectionProfileNamesParameters struct {

	// +kubebuilder:validation:Optional
	ID []*string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// Signifies the key for the object type
	// +kubebuilder:validation:Optional
	Lhs *string `json:"lhs,omitempty" tf:"lhs,omitempty"`

	// Denotes the operation type.
	// +kubebuilder:validation:Optional
	Op *string `json:"op,omitempty" tf:"op,omitempty"`

	// Denotes the value for the given object type. Its value depends on the key.
	// +kubebuilder:validation:Optional
	Rhs *string `json:"rhs,omitempty" tf:"rhs,omitempty"`
}

type CustomControlsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomControlsParameters struct {

	// The performed action
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	ActionValue *string `json:"actionValue,omitempty" tf:"action_value,omitempty"`

	// Name of the inspection profile
	// +kubebuilder:validation:Optional
	AssociatedInspectionProfileNames []AssociatedInspectionProfileNamesParameters `json:"associatedInspectionProfileNames,omitempty" tf:"associated_inspection_profile_names,omitempty"`

	// +kubebuilder:validation:Optional
	ControlNumber *string `json:"controlNumber,omitempty" tf:"control_number,omitempty"`

	// The control rule in JSON format that has the conditions and type of control for the inspection control
	// +kubebuilder:validation:Optional
	ControlRuleJSON *string `json:"controlRuleJson,omitempty" tf:"control_rule_json,omitempty"`

	// The performed action
	// +kubebuilder:validation:Required
	DefaultAction *string `json:"defaultAction" tf:"default_action,omitempty"`

	// This is used to provide the redirect URL if the default action is set to REDIRECT
	// +kubebuilder:validation:Optional
	DefaultActionValue *string `json:"defaultActionValue,omitempty" tf:"default_action_value,omitempty"`

	// Description of the custom control
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// OWASP Predefined Paranoia Level. Range: [1-4], inclusive
	// +kubebuilder:validation:Optional
	ParanoiaLevel *string `json:"paranoiaLevel,omitempty" tf:"paranoia_level,omitempty"`

	// Rules of the custom controls applied as conditions (JSON)
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Severity of the control number
	// +kubebuilder:validation:Required
	Severity *string `json:"severity" tf:"severity,omitempty"`

	// Rules to be applied to the request or response type
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
	// +kubebuilder:validation:Optional
	Names []*string `json:"names,omitempty" tf:"names,omitempty"`

	// Type value for the rules.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CustomControlsSpec defines the desired state of CustomControls
type CustomControlsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomControlsParameters `json:"forProvider"`
}

// CustomControlsStatus defines the observed state of CustomControls.
type CustomControlsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomControlsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomControls is the Schema for the CustomControlss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,zpa}
type CustomControls struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomControlsSpec   `json:"spec"`
	Status            CustomControlsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomControlsList contains a list of CustomControlss
type CustomControlsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomControls `json:"items"`
}

// Repository type metadata.
var (
	CustomControls_Kind             = "CustomControls"
	CustomControls_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomControls_Kind}.String()
	CustomControls_KindAPIVersion   = CustomControls_Kind + "." + CRDGroupVersion.String()
	CustomControls_GroupVersionKind = CRDGroupVersion.WithKind(CustomControls_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomControls{}, &CustomControlsList{})
}
