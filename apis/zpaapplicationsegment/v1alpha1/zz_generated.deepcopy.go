//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Segment) DeepCopyInto(out *Segment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Segment.
func (in *Segment) DeepCopy() *Segment {
	if in == nil {
		return nil
	}
	out := new(Segment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Segment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentInitParameters) DeepCopyInto(out *SegmentInitParameters) {
	*out = *in
	if in.BypassType != nil {
		in, out := &in.BypassType, &out.BypassType
		*out = new(string)
		**out = **in
	}
	if in.ConfigSpace != nil {
		in, out := &in.ConfigSpace, &out.ConfigSpace
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DomainNames != nil {
		in, out := &in.DomainNames, &out.DomainNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DoubleEncrypt != nil {
		in, out := &in.DoubleEncrypt, &out.DoubleEncrypt
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.HealthReporting != nil {
		in, out := &in.HealthReporting, &out.HealthReporting
		*out = new(string)
		**out = **in
	}
	if in.IPAnchored != nil {
		in, out := &in.IPAnchored, &out.IPAnchored
		*out = new(bool)
		**out = **in
	}
	if in.IcmpAccessType != nil {
		in, out := &in.IcmpAccessType, &out.IcmpAccessType
		*out = new(string)
		**out = **in
	}
	if in.IsCnameEnabled != nil {
		in, out := &in.IsCnameEnabled, &out.IsCnameEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsIncompleteDrConfig != nil {
		in, out := &in.IsIncompleteDrConfig, &out.IsIncompleteDrConfig
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PassiveHealthEnabled != nil {
		in, out := &in.PassiveHealthEnabled, &out.PassiveHealthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SegmentGroupName != nil {
		in, out := &in.SegmentGroupName, &out.SegmentGroupName
		*out = new(string)
		**out = **in
	}
	if in.SelectConnectorCloseToApp != nil {
		in, out := &in.SelectConnectorCloseToApp, &out.SelectConnectorCloseToApp
		*out = new(bool)
		**out = **in
	}
	if in.ServerGroups != nil {
		in, out := &in.ServerGroups, &out.ServerGroups
		*out = make([]ServerGroupsInitParameters, len(*in))
		copy(*out, *in)
	}
	if in.TCPKeepAlive != nil {
		in, out := &in.TCPKeepAlive, &out.TCPKeepAlive
		*out = new(string)
		**out = **in
	}
	if in.TCPPortRange != nil {
		in, out := &in.TCPPortRange, &out.TCPPortRange
		*out = make([]TCPPortRangeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TCPPortRanges != nil {
		in, out := &in.TCPPortRanges, &out.TCPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UDPPortRange != nil {
		in, out := &in.UDPPortRange, &out.UDPPortRange
		*out = make([]UDPPortRangeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UDPPortRanges != nil {
		in, out := &in.UDPPortRanges, &out.UDPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseInDrMode != nil {
		in, out := &in.UseInDrMode, &out.UseInDrMode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentInitParameters.
func (in *SegmentInitParameters) DeepCopy() *SegmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(SegmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentList) DeepCopyInto(out *SegmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Segment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentList.
func (in *SegmentList) DeepCopy() *SegmentList {
	if in == nil {
		return nil
	}
	out := new(SegmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SegmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentObservation) DeepCopyInto(out *SegmentObservation) {
	*out = *in
	if in.BypassType != nil {
		in, out := &in.BypassType, &out.BypassType
		*out = new(string)
		**out = **in
	}
	if in.ConfigSpace != nil {
		in, out := &in.ConfigSpace, &out.ConfigSpace
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DomainNames != nil {
		in, out := &in.DomainNames, &out.DomainNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DoubleEncrypt != nil {
		in, out := &in.DoubleEncrypt, &out.DoubleEncrypt
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.HealthReporting != nil {
		in, out := &in.HealthReporting, &out.HealthReporting
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPAnchored != nil {
		in, out := &in.IPAnchored, &out.IPAnchored
		*out = new(bool)
		**out = **in
	}
	if in.IcmpAccessType != nil {
		in, out := &in.IcmpAccessType, &out.IcmpAccessType
		*out = new(string)
		**out = **in
	}
	if in.IsCnameEnabled != nil {
		in, out := &in.IsCnameEnabled, &out.IsCnameEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsIncompleteDrConfig != nil {
		in, out := &in.IsIncompleteDrConfig, &out.IsIncompleteDrConfig
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PassiveHealthEnabled != nil {
		in, out := &in.PassiveHealthEnabled, &out.PassiveHealthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SegmentGroupID != nil {
		in, out := &in.SegmentGroupID, &out.SegmentGroupID
		*out = new(string)
		**out = **in
	}
	if in.SegmentGroupName != nil {
		in, out := &in.SegmentGroupName, &out.SegmentGroupName
		*out = new(string)
		**out = **in
	}
	if in.SelectConnectorCloseToApp != nil {
		in, out := &in.SelectConnectorCloseToApp, &out.SelectConnectorCloseToApp
		*out = new(bool)
		**out = **in
	}
	if in.ServerGroups != nil {
		in, out := &in.ServerGroups, &out.ServerGroups
		*out = make([]ServerGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TCPKeepAlive != nil {
		in, out := &in.TCPKeepAlive, &out.TCPKeepAlive
		*out = new(string)
		**out = **in
	}
	if in.TCPPortRange != nil {
		in, out := &in.TCPPortRange, &out.TCPPortRange
		*out = make([]TCPPortRangeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TCPPortRanges != nil {
		in, out := &in.TCPPortRanges, &out.TCPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UDPPortRange != nil {
		in, out := &in.UDPPortRange, &out.UDPPortRange
		*out = make([]UDPPortRangeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UDPPortRanges != nil {
		in, out := &in.UDPPortRanges, &out.UDPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseInDrMode != nil {
		in, out := &in.UseInDrMode, &out.UseInDrMode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentObservation.
func (in *SegmentObservation) DeepCopy() *SegmentObservation {
	if in == nil {
		return nil
	}
	out := new(SegmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentParameters) DeepCopyInto(out *SegmentParameters) {
	*out = *in
	if in.BypassType != nil {
		in, out := &in.BypassType, &out.BypassType
		*out = new(string)
		**out = **in
	}
	if in.ConfigSpace != nil {
		in, out := &in.ConfigSpace, &out.ConfigSpace
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DomainNames != nil {
		in, out := &in.DomainNames, &out.DomainNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DoubleEncrypt != nil {
		in, out := &in.DoubleEncrypt, &out.DoubleEncrypt
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.HealthReporting != nil {
		in, out := &in.HealthReporting, &out.HealthReporting
		*out = new(string)
		**out = **in
	}
	if in.IPAnchored != nil {
		in, out := &in.IPAnchored, &out.IPAnchored
		*out = new(bool)
		**out = **in
	}
	if in.IcmpAccessType != nil {
		in, out := &in.IcmpAccessType, &out.IcmpAccessType
		*out = new(string)
		**out = **in
	}
	if in.IsCnameEnabled != nil {
		in, out := &in.IsCnameEnabled, &out.IsCnameEnabled
		*out = new(bool)
		**out = **in
	}
	if in.IsIncompleteDrConfig != nil {
		in, out := &in.IsIncompleteDrConfig, &out.IsIncompleteDrConfig
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PassiveHealthEnabled != nil {
		in, out := &in.PassiveHealthEnabled, &out.PassiveHealthEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SegmentGroupID != nil {
		in, out := &in.SegmentGroupID, &out.SegmentGroupID
		*out = new(string)
		**out = **in
	}
	if in.SegmentGroupIDRef != nil {
		in, out := &in.SegmentGroupIDRef, &out.SegmentGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SegmentGroupIDSelector != nil {
		in, out := &in.SegmentGroupIDSelector, &out.SegmentGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SegmentGroupName != nil {
		in, out := &in.SegmentGroupName, &out.SegmentGroupName
		*out = new(string)
		**out = **in
	}
	if in.SelectConnectorCloseToApp != nil {
		in, out := &in.SelectConnectorCloseToApp, &out.SelectConnectorCloseToApp
		*out = new(bool)
		**out = **in
	}
	if in.ServerGroups != nil {
		in, out := &in.ServerGroups, &out.ServerGroups
		*out = make([]ServerGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TCPKeepAlive != nil {
		in, out := &in.TCPKeepAlive, &out.TCPKeepAlive
		*out = new(string)
		**out = **in
	}
	if in.TCPPortRange != nil {
		in, out := &in.TCPPortRange, &out.TCPPortRange
		*out = make([]TCPPortRangeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TCPPortRanges != nil {
		in, out := &in.TCPPortRanges, &out.TCPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UDPPortRange != nil {
		in, out := &in.UDPPortRange, &out.UDPPortRange
		*out = make([]UDPPortRangeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UDPPortRanges != nil {
		in, out := &in.UDPPortRanges, &out.UDPPortRanges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseInDrMode != nil {
		in, out := &in.UseInDrMode, &out.UseInDrMode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentParameters.
func (in *SegmentParameters) DeepCopy() *SegmentParameters {
	if in == nil {
		return nil
	}
	out := new(SegmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentSpec) DeepCopyInto(out *SegmentSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentSpec.
func (in *SegmentSpec) DeepCopy() *SegmentSpec {
	if in == nil {
		return nil
	}
	out := new(SegmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentStatus) DeepCopyInto(out *SegmentStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentStatus.
func (in *SegmentStatus) DeepCopy() *SegmentStatus {
	if in == nil {
		return nil
	}
	out := new(SegmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerGroupsInitParameters) DeepCopyInto(out *ServerGroupsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerGroupsInitParameters.
func (in *ServerGroupsInitParameters) DeepCopy() *ServerGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerGroupsObservation) DeepCopyInto(out *ServerGroupsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerGroupsObservation.
func (in *ServerGroupsObservation) DeepCopy() *ServerGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(ServerGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerGroupsParameters) DeepCopyInto(out *ServerGroupsParameters) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IDRefs != nil {
		in, out := &in.IDRefs, &out.IDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IDSelector != nil {
		in, out := &in.IDSelector, &out.IDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerGroupsParameters.
func (in *ServerGroupsParameters) DeepCopy() *ServerGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(ServerGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TCPPortRangeInitParameters) DeepCopyInto(out *TCPPortRangeInitParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TCPPortRangeInitParameters.
func (in *TCPPortRangeInitParameters) DeepCopy() *TCPPortRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(TCPPortRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TCPPortRangeObservation) DeepCopyInto(out *TCPPortRangeObservation) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TCPPortRangeObservation.
func (in *TCPPortRangeObservation) DeepCopy() *TCPPortRangeObservation {
	if in == nil {
		return nil
	}
	out := new(TCPPortRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TCPPortRangeParameters) DeepCopyInto(out *TCPPortRangeParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TCPPortRangeParameters.
func (in *TCPPortRangeParameters) DeepCopy() *TCPPortRangeParameters {
	if in == nil {
		return nil
	}
	out := new(TCPPortRangeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UDPPortRangeInitParameters) DeepCopyInto(out *UDPPortRangeInitParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UDPPortRangeInitParameters.
func (in *UDPPortRangeInitParameters) DeepCopy() *UDPPortRangeInitParameters {
	if in == nil {
		return nil
	}
	out := new(UDPPortRangeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UDPPortRangeObservation) DeepCopyInto(out *UDPPortRangeObservation) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UDPPortRangeObservation.
func (in *UDPPortRangeObservation) DeepCopy() *UDPPortRangeObservation {
	if in == nil {
		return nil
	}
	out := new(UDPPortRangeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UDPPortRangeParameters) DeepCopyInto(out *UDPPortRangeParameters) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UDPPortRangeParameters.
func (in *UDPPortRangeParameters) DeepCopy() *UDPPortRangeParameters {
	if in == nil {
		return nil
	}
	out := new(UDPPortRangeParameters)
	in.DeepCopyInto(out)
	return out
}
